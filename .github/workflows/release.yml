name: Generate binaries and upload to GitHub Releases
on:
  release:
    types: [published]
jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Build static releases with PCRE2.
      PCRE2_SYS_STATIC: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos, macos-arm, win-msvc, win-gnu]
        include:
        - build: linux
          os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-gnu
        - build: linux-arm
          os: ubuntu-latest
          rust: nightly
          target: aarch64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: macos-arm
          os: macos-latest
          rust: nightly
          target: aarch64-apple-darwin  
        - build: win-msvc
          os: windows-latest
          rust: nightly
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-latest
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2019
        #   rust: nightly
        #   target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Get release version and upload_url
      id: get_release
      run: |
        echo "BINK_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
        echo "UPLOAD_URL=${{ github.event.release.upload_url }}" >> $GITHUB_ENV

    - name: Build binary
      uses: houseabsolute/actions-rust-cross@v0
      with:
        command: "build"
        target: ${{ matrix.target }}
        toolchain: ${{ matrix.rust }}
        args: "--release"

    - name: Build archive
      shell: bash
      run: |
        staging="libbink-${{ env.BINK_VERSION }}-${{ matrix.target }}"
        mkdir "$staging"
        cp "include/bink.h" "$staging/"

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/${{ matrix.target }}/release/bink.dll" "$staging/"
          if [ "${{ matrix.build }}" = "win-gnu" ]; then
            cp "target/${{ matrix.target }}/release/libbink.a" "$staging/"
          else
            cp "target/${{ matrix.target }}/release/bink.pdb" "$staging/"
            cp "target/${{ matrix.target }}/release/bink.lib" "$staging/"
          fi

          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cp "target/${{ matrix.target }}/release/libbink.dylib" "$staging/"
          cp "target/${{ matrix.target }}/release/libbink.a" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/libbink.so" "$staging/"
          cp "target/${{ matrix.target }}/release/libbink.a" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream